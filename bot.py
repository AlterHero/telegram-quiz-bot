import asyncio
import logging
import nest_asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from config import API_TOKEN
from database import create_table, get_quiz_index, update_quiz_index, update_score, get_score
from quiz import generate_options_keyboard
from questions import quiz_data

nest_asyncio.apply()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=keyboard)

@dp.message(F.text.casefold() == "–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_quiz_button_handler(message: types.Message):
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑!")
    user_id = message.from_user.id
    await update_quiz_index(user_id, 0)
    await update_score(user_id, 0)
    await send_question(message, index=0)

async def send_question(message, index=None):
    if index is None:
        index = await get_quiz_index(message.from_user.id)
    print(f"[DEBUG] –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {index}")
    print(f"[DEBUG] –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(quiz_data)}")
    await message.answer(quiz_data[index]['question'], reply_markup=generate_options_keyboard(index))

@dp.callback_query(lambda c: c.data and c.data in {"correct", "wrong"})
async def handle_answer(callback: types.CallbackQuery):
    print(f"[DEBUG] callback.data = {callback.data}")
    question_index = await get_quiz_index(callback.from_user.id)

    await callback.message.edit_text(f"{quiz_data[question_index]['question']}")

    score = await get_score(callback.from_user.id)
    if score is None:
        score = 0

    if callback.data == "correct":
        await callback.message.answer("–í–µ—Ä–Ω–æ!")
        await update_score(callback.from_user.id, score + 1)
    else:
        correct_answer = quiz_data[question_index]['options'][quiz_data[question_index]['correct_option']]
        await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    new_index = question_index + 1
    await update_quiz_index(callback.from_user.id, new_index)

    if new_index < len(quiz_data):
        await send_question(callback.message, index=new_index)
    else:
        final_score = await get_score(callback.from_user.id)
        await callback.message.answer(
            f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω, {callback.from_user.first_name}!\n"
            f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {final_score} –∏–∑ {len(quiz_data)} –±–∞–ª–ª–æ–≤!"
        )

@dp.callback_query()
async def fallback_handler(callback: types.CallbackQuery):
    print(f"[DEBUG fallback] callback.data = {callback.data}")
    await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞")

async def main():
    await create_table()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
